# format格式化处理  ，格式化输出  位置参数
print('{0} love {1}.{2}'.format('i','csdn','com'))


# 关键字参数
print('{a} love {b}.{c}'.format(a='i',b='csdn',c='com'))

# 关键字参数和位置参数混用,位置参数在前
print('{0} love {b}.{c}'.format('i',b='csdn',c='com'))

# 对大括号进行转义输出
print('{{{0}}}'.format('不打印'))

# 格式化符号
print('{0:.1f}{1}'.format(27.658,'GB'))



# %c   格式化字符及其ASCII码
print('%c' % 97)

# python支持两种形式的输入参数,一种元组,一种字典
print('%c %c %c ' % (97,98,99))

# %s  格式化字符串
print("%s"  %  'i love python')

# %d  格式化整数
print('%d + %d = %d' % (4,5,4+5))

# %o  格式化无符号八进制数
print('%o' % 10)

# %x  格式化无符号十六进制数    %X   大写
print('%x' % 10)
print('%X ' %  10)
print('%X' % 160)

# %f 格式化浮点数,可指定精度,默认6位小数
print('%f' % 27.658)

# %e  格式化科学计数法    %E 大写,默认六位小数
print('%e ' % 27.658)
print('%E' % 25.9684)

# %g  %G 根据值的大小决定使用%f或者%e   (待确定)
print('%g' % 27.6583213131)
print('%G ' % 24.2564621)

# 格式化辅助符号%，m>有效数据位数时，右对齐。m<有效数据位数时，左对齐。n>小数点位数时补0，m>有效数据位数时，补空格
# m.n  m表示占位   n是小数点后的位数
print('%5.1f' % 27.658)
print('%10d' % 52)

# -  用于左对齐
print('%-10d' % 52)

# +  在正数面前显示+号
print('%+5d ' % 5)

#   在八进制面前显示'0o',在十六进制面前显示'0x'或者'0X'
print('%#o'  %  10)
print('%#x' % 25)

# 0  显示的数字面前填充'0'取代空格
print('%010d' % 5)
print('%0-10d' % 5)

# 字符串转义符
# \'    打印出单引号
# \"    打印出双引号
# \b    退格符
# \n    换行符
# \t    tab键横向制表符
# \r    回车符
# \o    八进制代表的字符
# \x    十六进制代表的字符
# \0    代表一个空字符
# \\    打印出反斜杠\
# \v    纵向制表符
# \a    发出系统响铃声

# raw原始字符串 r
str = r'aa\nbb'
print(str)

# unicode 字符串 u 显示的是Unicode编码
str = u'aa\nbb'
print(str)